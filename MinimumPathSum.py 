import sys
import numpy as np

class Solution():
    def minPathSum(self, grid):
        row = len(grid)
        if row == 0:
            return 0
        col = len(grid[0])
        ans = grid
        print(np.matrix(grid))

        # def minp(r,c):
        #     if (r < 0 or c < 0):
        #         return sys.maxsize
        #     elif (r == 0 and c == 0):
        #         return grid[r][c]
        #     else:
        #         return grid[r][c] + min(minp(r-1,c),minp(r,c-1))
        # for r in range(row):
        #     for c in range(col):
        #         ans[r][c] = minp(r,c)
        for r in range(1,row):
            ans[r][0] += ans[r-1][0]
            # print(np.matrix(ans))

        for c in range(1,col):
            ans[0][c] += ans[0][c-1]
            # print(np.matrix(ans))
        # print(np.matrix(grid))
        for r in range(1,row):
            for c in range(1,col):
                ans[r][c] += min (ans[r-1][c], ans[r][c-1]);
        print(np.matrix(ans))

        return ans[row-1][col-1]

x = Solution()
print(x.minPathSum([[1,3,1],[1,5,1],[4,2,1]]))

# print(x.minPathSum([[7,1,3,5,8,9,9,2,1,9,0,8,3,1,6,6,9,5],[9,5,9,4,0,4,8,8,9,5,7,3,6,6,6,9,1,6],[8,2,9,1,3,1,9,7,2,5,3,1,2,4,8,2,8,8],[6,7,9,8,4,8,3,0,4,0,9,6,6,0,0,5,1,4],[7,1,3,1,8,8,3,1,2,1,5,0,2,1,9,1,1,4],[9,5,4,3,5,6,1,3,6,4,9,7,0,8,0,3,9,9],[1,4,2,5,8,7,7,0,0,7,1,2,1,2,7,7,7,4],[3,9,7,9,5,8,9,5,6,9,8,8,0,1,4,2,8,2],[1,5,2,2,2,5,6,3,9,3,1,7,9,6,8,6,8,3],[5,7,8,3,8,8,3,9,9,8,1,9,2,5,4,7,7,7],[2,3,2,4,8,5,1,7,2,9,5,2,4,2,9,2,8,7],[0,1,6,1,1,0,0,6,5,4,3,4,3,7,9,6,1,9]]))

